// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thinktecture.TestDatabaseContext;

namespace Thinktecture.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20200504141811_Add_tables_with_owned_entities")]
    partial class Add_tables_with_owned_entities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConvertibleClass")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyWithBackingField")
                        .HasColumnType("int");

                    b.Property<int>("_privateField")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningInlineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesOwningInlineEntity");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningManyEntities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesOwningManyEntities");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningOneSeparateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesOwningOneSeparateEntity");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityWithAutoIncrement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesWithAutoIncrement");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityWithDotnetDefaultValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("0b151271-79bb-4f6c-b85f-e8f61300ff1b"));

                    b.Property<int>("Int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("NullableInt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("NullableString")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("4");

                    b.Property<string>("String")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("3");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesWithDotnetDefaultValues");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityWithRowVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesWithRowVersion");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityWithShadowProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShadowIntProperty")
                        .HasColumnType("int");

                    b.Property<string>("ShadowStringProperty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesWithShadowProperties");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityWithSqlDefaultValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("Int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("NullableInt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("2");

                    b.Property<string>("NullableString")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("'4'");

                    b.Property<string>("String")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("'3'");

                    b.HasKey("Id");

                    b.ToTable("TestEntitiesWithDefaultValues");
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningInlineEntity", b =>
                {
                    b.OwnsOne("Thinktecture.TestDatabaseContext.OwnedInlineEntity", "InlineEntity", b1 =>
                        {
                            b1.Property<Guid>("TestEntityOwningInlineEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("IntColumn")
                                .HasColumnType("int");

                            b1.Property<string>("StringColumn")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestEntityOwningInlineEntityId");

                            b1.ToTable("TestEntitiesOwningInlineEntity");

                            b1.WithOwner()
                                .HasForeignKey("TestEntityOwningInlineEntityId");
                        });
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningManyEntities", b =>
                {
                    b.OwnsMany("Thinktecture.TestDatabaseContext.OwnedSeparateEntity", "SeparateEntities", b1 =>
                        {
                            b1.Property<Guid>("TestEntityOwningManyEntitiesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("IntColumn")
                                .HasColumnType("int");

                            b1.Property<string>("StringColumn")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestEntityOwningManyEntitiesId", "Id");

                            b1.ToTable("SeparateEntities_Many");

                            b1.WithOwner()
                                .HasForeignKey("TestEntityOwningManyEntitiesId");
                        });
                });

            modelBuilder.Entity("Thinktecture.TestDatabaseContext.TestEntityOwningOneSeparateEntity", b =>
                {
                    b.OwnsOne("Thinktecture.TestDatabaseContext.OwnedSeparateEntity", "SeparateEntity", b1 =>
                        {
                            b1.Property<Guid>("TestEntityOwningOneSeparateEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("IntColumn")
                                .HasColumnType("int");

                            b1.Property<string>("StringColumn")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestEntityOwningOneSeparateEntityId");

                            b1.ToTable("SeparateEntities_One");

                            b1.WithOwner()
                                .HasForeignKey("TestEntityOwningOneSeparateEntityId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
